#!/usr/bin/env python

import os
import sys

from tools.gpick import *

Import('*')
local_env = env.Clone()

if not local_env.GetOption('clean'):
	local_env.ParseConfig('pkg-config --cflags --libs $GTK_PC')
	local_env.ParseConfig('pkg-config --cflags --libs $LUA_PC')
	if local_env.has_key('UNIQUE_PC'):
		local_env.ParseConfig('pkg-config --libs $UNIQUE_PC')
	if local_env.has_key('DBUSGLIB_PC'):
		local_env.ParseConfig('pkg-config --libs $DBUSGLIB_PC')

sources = local_env.Glob('*.cpp') + local_env.Glob('dynv/*.cpp') + local_env.Glob('tools/*.cpp')

objects = []
objects.append(SConscript(['version/SConscript'], exports='env'))
objects.append(SConscript(['unique/SConscript'], exports='env'))
objects.append(SConscript(['gtk/SConscript'], exports='env'))
objects.append(SConscript(['layout/SConscript'], exports='env'))

if local_env['BUILD_TARGET'] == 'win32':
	local_env.Append(LINKFLAGS = '-mwindows')
	objects.append(SConscript(['winres/SConscript'], exports='env'))
elif local_env['BUILD_TARGET'] == 'linux2':
	local_env.Append(LIBS=['rt'])

executable = local_env.Program(
	'gpick',
	source = [sources, objects])

Depends(executable, local_env.UseLibrary('expat'))

Return('executable')
