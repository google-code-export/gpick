/*
 * Generated by gdbus-codegen 2.32.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __DBUSINTERFACE_H__
#define __DBUSINTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.google.code.gpick.SingleInstance */

#define GPICK_TYPE_SINGLE_INSTANCE (gpick_single_instance_get_type ())
#define GPICK_SINGLE_INSTANCE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPICK_TYPE_SINGLE_INSTANCE, GpickSingleInstance))
#define GPICK_IS_SINGLE_INSTANCE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPICK_TYPE_SINGLE_INSTANCE))
#define GPICK_SINGLE_INSTANCE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GPICK_TYPE_SINGLE_INSTANCE, GpickSingleInstanceIface))

struct _GpickSingleInstance;
typedef struct _GpickSingleInstance GpickSingleInstance;
typedef struct _GpickSingleInstanceIface GpickSingleInstanceIface;

struct _GpickSingleInstanceIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_activate) (
    GpickSingleInstance *object,
    GDBusMethodInvocation *invocation);

};

GType gpick_single_instance_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gpick_single_instance_interface_info (void);
guint gpick_single_instance_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gpick_single_instance_complete_activate (
    GpickSingleInstance *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gpick_single_instance_call_activate (
    GpickSingleInstance *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gpick_single_instance_call_activate_finish (
    GpickSingleInstance *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gpick_single_instance_call_activate_sync (
    GpickSingleInstance *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GPICK_TYPE_SINGLE_INSTANCE_PROXY (gpick_single_instance_proxy_get_type ())
#define GPICK_SINGLE_INSTANCE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPICK_TYPE_SINGLE_INSTANCE_PROXY, GpickSingleInstanceProxy))
#define GPICK_SINGLE_INSTANCE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GPICK_TYPE_SINGLE_INSTANCE_PROXY, GpickSingleInstanceProxyClass))
#define GPICK_SINGLE_INSTANCE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GPICK_TYPE_SINGLE_INSTANCE_PROXY, GpickSingleInstanceProxyClass))
#define GPICK_IS_SINGLE_INSTANCE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPICK_TYPE_SINGLE_INSTANCE_PROXY))
#define GPICK_IS_SINGLE_INSTANCE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GPICK_TYPE_SINGLE_INSTANCE_PROXY))

typedef struct _GpickSingleInstanceProxy GpickSingleInstanceProxy;
typedef struct _GpickSingleInstanceProxyClass GpickSingleInstanceProxyClass;
typedef struct _GpickSingleInstanceProxyPrivate GpickSingleInstanceProxyPrivate;

struct _GpickSingleInstanceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GpickSingleInstanceProxyPrivate *priv;
};

struct _GpickSingleInstanceProxyClass
{
  GDBusProxyClass parent_class;
};

GType gpick_single_instance_proxy_get_type (void) G_GNUC_CONST;

void gpick_single_instance_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GpickSingleInstance *gpick_single_instance_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GpickSingleInstance *gpick_single_instance_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gpick_single_instance_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GpickSingleInstance *gpick_single_instance_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GpickSingleInstance *gpick_single_instance_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GPICK_TYPE_SINGLE_INSTANCE_SKELETON (gpick_single_instance_skeleton_get_type ())
#define GPICK_SINGLE_INSTANCE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPICK_TYPE_SINGLE_INSTANCE_SKELETON, GpickSingleInstanceSkeleton))
#define GPICK_SINGLE_INSTANCE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GPICK_TYPE_SINGLE_INSTANCE_SKELETON, GpickSingleInstanceSkeletonClass))
#define GPICK_SINGLE_INSTANCE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GPICK_TYPE_SINGLE_INSTANCE_SKELETON, GpickSingleInstanceSkeletonClass))
#define GPICK_IS_SINGLE_INSTANCE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPICK_TYPE_SINGLE_INSTANCE_SKELETON))
#define GPICK_IS_SINGLE_INSTANCE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GPICK_TYPE_SINGLE_INSTANCE_SKELETON))

typedef struct _GpickSingleInstanceSkeleton GpickSingleInstanceSkeleton;
typedef struct _GpickSingleInstanceSkeletonClass GpickSingleInstanceSkeletonClass;
typedef struct _GpickSingleInstanceSkeletonPrivate GpickSingleInstanceSkeletonPrivate;

struct _GpickSingleInstanceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GpickSingleInstanceSkeletonPrivate *priv;
};

struct _GpickSingleInstanceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gpick_single_instance_skeleton_get_type (void) G_GNUC_CONST;

GpickSingleInstance *gpick_single_instance_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for com.google.code.gpick.Control */

#define GPICK_TYPE_CONTROL (gpick_control_get_type ())
#define GPICK_CONTROL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPICK_TYPE_CONTROL, GpickControl))
#define GPICK_IS_CONTROL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPICK_TYPE_CONTROL))
#define GPICK_CONTROL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GPICK_TYPE_CONTROL, GpickControlIface))

struct _GpickControl;
typedef struct _GpickControl GpickControl;
typedef struct _GpickControlIface GpickControlIface;

struct _GpickControlIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_activate_floating_picker) (
    GpickControl *object,
    GDBusMethodInvocation *invocation);

};

GType gpick_control_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gpick_control_interface_info (void);
guint gpick_control_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gpick_control_complete_activate_floating_picker (
    GpickControl *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gpick_control_call_activate_floating_picker (
    GpickControl *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gpick_control_call_activate_floating_picker_finish (
    GpickControl *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gpick_control_call_activate_floating_picker_sync (
    GpickControl *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GPICK_TYPE_CONTROL_PROXY (gpick_control_proxy_get_type ())
#define GPICK_CONTROL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPICK_TYPE_CONTROL_PROXY, GpickControlProxy))
#define GPICK_CONTROL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GPICK_TYPE_CONTROL_PROXY, GpickControlProxyClass))
#define GPICK_CONTROL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GPICK_TYPE_CONTROL_PROXY, GpickControlProxyClass))
#define GPICK_IS_CONTROL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPICK_TYPE_CONTROL_PROXY))
#define GPICK_IS_CONTROL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GPICK_TYPE_CONTROL_PROXY))

typedef struct _GpickControlProxy GpickControlProxy;
typedef struct _GpickControlProxyClass GpickControlProxyClass;
typedef struct _GpickControlProxyPrivate GpickControlProxyPrivate;

struct _GpickControlProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GpickControlProxyPrivate *priv;
};

struct _GpickControlProxyClass
{
  GDBusProxyClass parent_class;
};

GType gpick_control_proxy_get_type (void) G_GNUC_CONST;

void gpick_control_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GpickControl *gpick_control_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GpickControl *gpick_control_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gpick_control_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GpickControl *gpick_control_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GpickControl *gpick_control_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GPICK_TYPE_CONTROL_SKELETON (gpick_control_skeleton_get_type ())
#define GPICK_CONTROL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPICK_TYPE_CONTROL_SKELETON, GpickControlSkeleton))
#define GPICK_CONTROL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GPICK_TYPE_CONTROL_SKELETON, GpickControlSkeletonClass))
#define GPICK_CONTROL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GPICK_TYPE_CONTROL_SKELETON, GpickControlSkeletonClass))
#define GPICK_IS_CONTROL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPICK_TYPE_CONTROL_SKELETON))
#define GPICK_IS_CONTROL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GPICK_TYPE_CONTROL_SKELETON))

typedef struct _GpickControlSkeleton GpickControlSkeleton;
typedef struct _GpickControlSkeletonClass GpickControlSkeletonClass;
typedef struct _GpickControlSkeletonPrivate GpickControlSkeletonPrivate;

struct _GpickControlSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GpickControlSkeletonPrivate *priv;
};

struct _GpickControlSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gpick_control_skeleton_get_type (void) G_GNUC_CONST;

GpickControl *gpick_control_skeleton_new (void);


/* ---- */

#define GPICK_TYPE_OBJECT (gpick_object_get_type ())
#define GPICK_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPICK_TYPE_OBJECT, GpickObject))
#define GPICK_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPICK_TYPE_OBJECT))
#define GPICK_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GPICK_TYPE_OBJECT, GpickObject))

struct _GpickObject;
typedef struct _GpickObject GpickObject;
typedef struct _GpickObjectIface GpickObjectIface;

struct _GpickObjectIface
{
  GTypeInterface parent_iface;
};

GType gpick_object_get_type (void) G_GNUC_CONST;

GpickSingleInstance *gpick_object_get_single_instance (GpickObject *object);
GpickControl *gpick_object_get_control (GpickObject *object);
GpickSingleInstance *gpick_object_peek_single_instance (GpickObject *object);
GpickControl *gpick_object_peek_control (GpickObject *object);

#define GPICK_TYPE_OBJECT_PROXY (gpick_object_proxy_get_type ())
#define GPICK_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPICK_TYPE_OBJECT_PROXY, GpickObjectProxy))
#define GPICK_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GPICK_TYPE_OBJECT_PROXY, GpickObjectProxyClass))
#define GPICK_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GPICK_TYPE_OBJECT_PROXY, GpickObjectProxyClass))
#define GPICK_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPICK_TYPE_OBJECT_PROXY))
#define GPICK_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GPICK_TYPE_OBJECT_PROXY))

typedef struct _GpickObjectProxy GpickObjectProxy;
typedef struct _GpickObjectProxyClass GpickObjectProxyClass;
typedef struct _GpickObjectProxyPrivate GpickObjectProxyPrivate;

struct _GpickObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  GpickObjectProxyPrivate *priv;
};

struct _GpickObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType gpick_object_proxy_get_type (void) G_GNUC_CONST;
GpickObjectProxy *gpick_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define GPICK_TYPE_OBJECT_SKELETON (gpick_object_skeleton_get_type ())
#define GPICK_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPICK_TYPE_OBJECT_SKELETON, GpickObjectSkeleton))
#define GPICK_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GPICK_TYPE_OBJECT_SKELETON, GpickObjectSkeletonClass))
#define GPICK_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GPICK_TYPE_OBJECT_SKELETON, GpickObjectSkeletonClass))
#define GPICK_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPICK_TYPE_OBJECT_SKELETON))
#define GPICK_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GPICK_TYPE_OBJECT_SKELETON))

typedef struct _GpickObjectSkeleton GpickObjectSkeleton;
typedef struct _GpickObjectSkeletonClass GpickObjectSkeletonClass;
typedef struct _GpickObjectSkeletonPrivate GpickObjectSkeletonPrivate;

struct _GpickObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  GpickObjectSkeletonPrivate *priv;
};

struct _GpickObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType gpick_object_skeleton_get_type (void) G_GNUC_CONST;
GpickObjectSkeleton *gpick_object_skeleton_new (const gchar *object_path);
void gpick_object_skeleton_set_single_instance (GpickObjectSkeleton *object, GpickSingleInstance *interface_);
void gpick_object_skeleton_set_control (GpickObjectSkeleton *object, GpickControl *interface_);

/* ---- */

#define GPICK_TYPE_OBJECT_MANAGER_CLIENT (gpick_object_manager_client_get_type ())
#define GPICK_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPICK_TYPE_OBJECT_MANAGER_CLIENT, GpickObjectManagerClient))
#define GPICK_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GPICK_TYPE_OBJECT_MANAGER_CLIENT, GpickObjectManagerClientClass))
#define GPICK_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GPICK_TYPE_OBJECT_MANAGER_CLIENT, GpickObjectManagerClientClass))
#define GPICK_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPICK_TYPE_OBJECT_MANAGER_CLIENT))
#define GPICK_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GPICK_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _GpickObjectManagerClient GpickObjectManagerClient;
typedef struct _GpickObjectManagerClientClass GpickObjectManagerClientClass;
typedef struct _GpickObjectManagerClientPrivate GpickObjectManagerClientPrivate;

struct _GpickObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  GpickObjectManagerClientPrivate *priv;
};

struct _GpickObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

GType gpick_object_manager_client_get_type (void) G_GNUC_CONST;

GType gpick_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void gpick_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *gpick_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *gpick_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void gpick_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *gpick_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *gpick_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __DBUSINTERFACE_H__ */
